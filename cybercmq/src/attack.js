import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Shield, Sword, Timer, Target, Server, Globe, Terminal, Lock, AlertTriangle, CheckCircle, Info } from 'lucide-react';
import './CyberWarGame.css';

const TimerComponent = ({ gameState, timeLeft, setTimeLeft, currentPhase, setCurrentPhase, setGameState, addLog }) => {
    useEffect(() => {
        let timer;
        if (gameState === 'jeu' && timeLeft > 0) {
            timer = setInterval(() => setTimeLeft(prev => prev - 1), 1000);
        } else if (timeLeft === 0) {
            if (currentPhase === 'site') {
                setCurrentPhase('serveur');
                setTimeLeft(600);
                addLog('Phase site termin√©e. Passage au serveur.');
            } else {
                setGameState('r√©sultats');
            }
        }
        return () => clearInterval(timer);
    }, [gameState, timeLeft, currentPhase, setTimeLeft, setCurrentPhase, setGameState, addLog]);

    return null;
};

const CyberWarGame = () => {
    const [gameState, setGameState] = useState('intro');
    const [currentPhase, setCurrentPhase] = useState('site');
    const [timeLeft, setTimeLeft] = useState(600);
    const [selectedTeam, setSelectedTeam] = useState(null);
    const [selectedRole, setSelectedRole] = useState(null);
    const [scores, setScores] = useState({ attaquants: 0, d√©fenseurs: 0 });
    const [gameLog, setGameLog] = useState([]);
    const [roleAssigned, setRoleAssigned] = useState(false);
    const [showRoleDetails, setShowRoleDetails] = useState(false);
    const [activeTab, setActiveTab] = useState('site');

    const initialWebsiteState = {
        currentPage: 'accueil',
        vulnerabilities: {
            xss: { discovered: false, exploited: false, patched: false },
            sqli: { discovered: false, exploited: false, patched: false },
            weak_password: { discovered: false, exploited: false, patched: false },
            fake_form: { discovered: false, exploited: false, patched: false }
        },
        userAccounts: ['admin:admin123', 'utilisateur1:pass123', 'invit√©:guest'],
        database: ['utilisateurs', 'commandes', 'produits']
    };

    const initialServerState = {
        services: {
            ssh: { running: true, vulnerable: true, patched: false, credentials: 'admin:weakpass' },
            ftp: { running: true, vulnerable: true, patched: false },
            web: { running: true, vulnerable: false, patched: false },
            fake_db: { running: true, vulnerable: false, patched: true }
        },
        files: ['/etc/passwd', '/var/log/auth.log', '/home/user/.ssh/id_rsa', '/var/www/decoy.txt'],
        processes: ['apache2', 'sshd', 'mysql', 'fake_service'],
        ports: [22, 80, 443, 21, 3306, 8080]
    };

    const [websiteState, setWebsiteState] = useState(initialWebsiteState);
    const [serverState, setServerState] = useState(initialServerState);

    const terminalInputRef = useRef(null);

    const roles = {
        attaquants: [
            {
                id: 'hacker-site',
                name: 'Hacker de Site Web',
                icon: 'üï∑Ô∏è',
                sp√©cialit√©: 'Trouver des failles dans les sites',
                description: 'Tu explores les sites web pour trouver des failles, comme des formulaires non s√©curis√©s. Teste les champs avec du code ou des mots de passe simples !',
                hints: [
                    'Essaie d‚Äôentrer <script>alert("test")</script> dans les champs de texte pour tester XSS.',
                    'Utilise " OR 1=1 --" dans les formulaires de connexion pour tenter une injection SQL.',
                    'Teste des mots de passe simples comme "admin123" sur la page de connexion.'
                ]
            },
            {
                id: 'explorateur-r√©seau',
                name: 'Explorateur R√©seau',
                icon: 'üì°',
                sp√©cialit√©: 'Cartographier les serveurs',
                description: 'Tu examines les serveurs pour trouver des services vuln√©rables. Utilise le terminal pour scanner les ports et tester les connexions !',
                hints: [
                    'Tape "nmap" dans le terminal pour voir les ports ouverts.',
                    'Essaie "ssh admin@server" avec un mot de passe faible comme "weakpass".',
                    'V√©rifie les fichiers comme "/var/www/decoy.txt" pour des indices (attention aux leurres !).'
                ]
            }
        ],
        d√©fenseurs: [
            {
                id: 'protecteur-s√©curit√©',
                name: 'Protecteur S√©curit√©',
                icon: 'üõ°Ô∏è',
                sp√©cialit√©: 'Surveiller les syst√®mes',
                description: 'Tu surveilles le site et le serveur pour rep√©rer les attaques. V√©rifie les journaux et bloque les failles !',
                hints: [
                    'Regarde le journal d‚Äôactivit√© pour rep√©rer des tentatives suspectes (XSS, SQLi).',
                    'Bloque les champs vuln√©rables en "patchant" XSS ou SQLi via les outils de d√©fense.',
                    'Change les mots de passe faibles comme "admin123" pour s√©curiser.'
                ]
            },
            {
                id: 'renforceur-syst√®me',
                name: 'Renforceur Syst√®me',
                icon: 'üîí',
                sp√©cialit√©: 'S√©curiser les serveurs',
                description: 'Tu renforces les serveurs en fermant les ports ou services vuln√©rables. Utilise le terminal pour appliquer des correctifs !',
                hints: [
                    'Tape "netstat" pour voir les ports ouverts et ferme ceux inutiles (e.g., port 21).',
                    'D√©sactive le service SSH s‚Äôil semble compromis.',
                    'Ignore les services comme "fake_db", c‚Äôest une fausse piste.'
                ]
            }
        ]
    };

    // Attribution du r√¥le
    useEffect(() => {
        if (!roleAssigned && gameState === 'intro') {
            const teams = ['attaquants', 'd√©fenseurs'];
            const randomTeam = teams[Math.floor(Math.random() * teams.length)];
            const randomRole = roles[randomTeam][Math.floor(Math.random() * roles[randomTeam].length)];
            setSelectedTeam(randomTeam);
            setSelectedRole(randomRole.id);
            setGameLog([`[${new Date().toLocaleTimeString('fr-FR')}] R√¥le assign√© : ${randomRole.name} (${randomTeam === 'attaquants' ? '‚öîÔ∏è Attaquants' : 'üõ°Ô∏è D√©fenseurs'})`]);
            setRoleAssigned(true);
        }
    }, [roleAssigned, gameState]);

    const addLog = useCallback((message) => {
        setGameLog(prev => [...prev.slice(-15), `[${new Date().toLocaleTimeString('fr-FR')}] ${selectedTeam === 'attaquants' ? '‚öîÔ∏è' : 'üõ°Ô∏è'} ${message}`]);
    }, [selectedTeam]);

    const handleAction = useCallback((team, message, points) => {
        addLog(message);
        setScores(prev => ({
            ...prev,
            [team]: prev[team] + points
        }));
    }, [addLog]);

    const handleRestartGame = () => {
        setGameState('intro');
        setCurrentPhase('site');
        setActiveTab('site');
        setTimeLeft(600);
        setSelectedTeam(null);
        setSelectedRole(null);
        setScores({ attaquants: 0, d√©fenseurs: 0 });
        setGameLog([]);
        setWebsiteState(initialWebsiteState);
        setServerState(initialServerState);
        setRoleAssigned(false);
        setShowRoleDetails(false);
    };

    const IntroAnimation = () => {
        const [animationStep, setAnimationStep] = useState(0);
        const [displayText, setDisplayText] = useState('');

        useEffect(() => {
            if (animationStep === 0) {
                let text = 'D√âMARRAGE...';
                let i = 0;
                const typeText = () => {
                    if (i <= text.length) {
                        setDisplayText(text.slice(0, i));
                        i++;
                        setTimeout(typeText, 100);
                    } else {
                        setTimeout(() => setAnimationStep(1), 800);
                    }
                };
                typeText();
            } else if (animationStep === 1 && selectedRole) {
                const role = roles[selectedTeam].find(r => r.id === selectedRole);
                let text = `R√îLE : ${role.name.toUpperCase()}`;
                let i = 0;
                const typeText = () => {
                    if (i <= text.length) {
                        setDisplayText(text.slice(0, i));
                        i++;
                        setTimeout(typeText, 60);
                    } else {
                        setShowRoleDetails(true);
                        setTimeout(() => setAnimationStep(2), 2000);
                    }
                };
                typeText();
            } else if (animationStep === 2) {
                setTimeout(() => setGameState('jeu'), 500);
            }
        }, [animationStep, selectedRole, selectedTeam]);

        return (
            <div className="game-container intro-container">
                <h1 className="intro-title">CyberWar</h1>
                <div className="hacker-text">{displayText}</div>
                {showRoleDetails && selectedRole && (
                    <RoleDetails role={roles[selectedTeam].find(r => r.id === selectedRole)} team={selectedTeam} />
                )}
            </div>
        );
    };

    const RoleDetails = ({ role, team }) => {
        return (
            <div className={`role-details ${team}`}>
                <h2 className="role-details-title">{role.name}</h2>
                <p><strong>R√¥le :</strong> {role.description}</p>
                <p><strong>Sp√©cialit√© :</strong> {role.sp√©cialit√©}</p>
                <p><strong>Conseils pour r√©ussir :</strong></p>
                <ul>
                    {role.hints.map((hint, i) => (
                        <li key={i}>{hint}</li>
                    ))}
                </ul>
                <p><strong>Objectifs :</strong></p>
                <ul>
                    {team === 'attaquants' ? (
                        <>
                            <li>Explore le site ou le serveur pour trouver des failles.</li>
                            <li>Teste des entr√©es (code, mots de passe) pour exploiter ces failles.</li>
                            <li>Marque des points en acc√©dant √† des donn√©es prot√©g√©es.</li>
                        </>
                    ) : (
                        <>
                            <li>Surveille les attaques dans le journal d‚Äôactivit√©.</li>
                            <li>R√©pare les failles en utilisant les outils de d√©fense.</li>
                            <li>Bloque les attaquants pour gagner des points.</li>
                        </>
                    )}
                </ul>
                <p><strong>Attention :</strong> Certaines actions sont des pi√®ges ! Lis bien les indices.</p>
            </div>
        );
    };

    const GameInterface = () => {
        const role = roles[selectedTeam]?.find(r => r.id === selectedRole);
        const formatTime = (s) => `${Math.floor(s / 60).toString().padStart(2, '0')}:${(s % 60).toString().padStart(2, '0')}`;

        return (
            <div className="game-container">
                <header className="header">
                    <div className="header-content">
                        <div className="header-left">
                            <h1 className="header-title">CyberWar</h1>
                            <div className="phase-info">
                                Phase : <span className="phase-name">{currentPhase === 'site' ? 'Site Web' : 'Serveur'}</span>
                            </div>
                        </div>
                        <div className="header-right">
                            <div className="timer">
                                <span className="timer-label">Temps</span>
                                <span className="timer-value">{formatTime(timeLeft)}</span>
                            </div>
                            <div className="scores">
                                <span className="score-label">Score</span>
                                <span className="score-value">
                  <span className="attaquants">{scores.attaquants}</span> - <span className="d√©fenseurs">{scores.d√©fenseurs}</span>
                </span>
                            </div>
                            <button
                                onClick={() => setShowRoleDetails(true)}
                                className="button role-details-btn"
                            >
                                <Info size={18} /> Voir mon r√¥le
                            </button>
                        </div>
                    </div>
                </header>
                <main className="main-content">
                    <aside className="sidebar">
                        {role && (
                            <div className={`panel role-panel ${selectedTeam}`}>
                                <div className="role-icon">{role.icon}</div>
                                <div className="role-name">{role.name}</div>
                                <div className="speciality">{role.sp√©cialit√©}</div>
                            </div>
                        )}
                        <div className="panel objectives">
                            <h3 className="panel-title">Objectifs</h3>
                            <div className="objective-list">
                                {selectedTeam === 'attaquants' ? (
                                    <>
                                        <div><CheckCircle className="icon" size={18} /> Trouver des failles</div>
                                        <div><AlertTriangle className="icon" size={18} /> Tester des exploits</div>
                                        <div><Target className="icon" size={18} /> Acc√©der aux donn√©es</div>
                                    </>
                                ) : (
                                    <>
                                        <div><Shield className="icon" size={18} /> D√©tecter les attaques</div>
                                        <div><Lock className="icon" size={18} /> R√©parer les failles</div>
                                        <div><Zap className="icon" size={18} /> Bloquer les hackers</div>
                                    </>
                                )}
                            </div>
                        </div>
                        <div className="panel activity">
                            <h3 className="panel-title">Journal d‚Äôactivit√©</h3>
                            <div className="activity-log">
                                {gameLog.map((log, i) => (
                                    <div key={i} className="log-entry">{log}</div>
                                ))}
                            </div>
                        </div>
                    </aside>
                    <div className="content">
                        <div className="tabs">
                            <button
                                onClick={() => setActiveTab('site')}
                                className={`tab ${activeTab === 'site' ? 'active attaquants' : ''}`}
                            >
                                üåê Site Web
                            </button>
                            <button
                                onClick={() => setActiveTab('serveur')}
                                className={`tab ${activeTab === 'serveur' ? 'active d√©fenseurs' : ''}`}
                            >
                                üñ•Ô∏è Serveur
                            </button>
                        </div>
                        <div className="interface">
                            {activeTab === 'site' ? <WebsiteInterface role={role} /> : <ServerInterface role={role} />}
                        </div>
                    </div>
                    {showRoleDetails && role && (
                        <div className="role-details-overlay">
                            <div className="role-details-container">
                                <button
                                    onClick={() => setShowRoleDetails(false)}
                                    className="button close-btn"
                                >
                                    Fermer
                                </button>
                                <RoleDetails role={role} team={selectedTeam} />
                            </div>
                        </div>
                    )}
                </main>
                <TimerComponent
                    gameState={gameState}
                    timeLeft={timeLeft}
                    setTimeLeft={setTimeLeft}
                    currentPhase={currentPhase}
                    setCurrentPhase={setCurrentPhase}
                    setGameState={setGameState}
                    addLog={addLog}
                />
            </div>
        );
    };

    const WebsiteInterface = ({ role }) => {
        const [currentPage, setCurrentPage] = useState('accueil');
        const [formData, setFormData] = useState({ username: '', password: '', comment: '', newsletter: '' });
        const [feedback, setFeedback] = useState('');

        const pages = [
            { id: 'accueil', name: 'Accueil' },
            { id: 'produits', name: 'Produits' },
            { id: '√†-propos', name: '√Ä propos' },
            { id: 'connexion', name: 'Connexion' },
            { id: 'contact', name: 'Contact' }
        ];

        const testXSS = (input) => {
            if (input.includes('<script>') || input.toLowerCase().includes('alert(')) {
                if (!websiteState.vulnerabilities.xss.exploited && selectedTeam === 'attaquants') {
                    setWebsiteState(prev => ({
                        ...prev,
                        vulnerabilities: { ...prev.vulnerabilities, xss: { ...prev.vulnerabilities.xss, exploited: true } }
                    }));
                    handleAction('attaquants', 'XSS r√©ussi ! Tu as ins√©r√© un script malveillant.', 20);
                }
                return true;
            }
            return false;
        };

        const testSQLi = (input) => {
            if (input.includes('" OR 1=1 --') || input.includes('\' OR 1=1 --')) {
                if (!websiteState.vulnerabilities.sqli.exploited && selectedTeam === 'attaquants') {
                    setWebsiteState(prev => ({
                        ...prev,
                        vulnerabilities: { ...prev.vulnerabilities, sqli: { ...prev.vulnerabilities.sqli, exploited: true } }
                    }));
                    handleAction('attaquants', 'Injection SQL r√©ussie ! Acc√®s √† la base de donn√©es.', 20);
                }
                return true;
            }
            return false;
        };

        const testWeakPassword = (username, password) => {
            const account = websiteState.userAccounts.find(acc => acc === `${username}:${password}`);
            if (account && !websiteState.vulnerabilities.weak_password.exploited && selectedTeam === 'attaquants') {
                setWebsiteState(prev => ({
                    ...prev,
                    vulnerabilities: { ...prev.vulnerabilities, weak_password: { ...prev.vulnerabilities.weak_password, exploited: true } }
                }));
                handleAction('attaquants', `Connexion r√©ussie avec ${username}:${password} ! Mot de passe faible d√©tect√©.`, 15);
                return true;
            }
            return false;
        };

        const patchVulnerability = (vuln) => {
            if (!websiteState.vulnerabilities[vuln].patched && selectedTeam === 'd√©fenseurs') {
                setWebsiteState(prev => ({
                    ...prev,
                    vulnerabilities: { ...prev.vulnerabilities, [vuln]: { ...prev.vulnerabilities[vuln], patched: true } }
                }));
                handleAction('d√©fenseurs', `Faille ${vuln.toUpperCase()} corrig√©e !`, 15);
            }
        };

        return (
            <div className="panel">
                <h2 className="panel-title">Site Web TechCorp</h2>
                <div className="sub-tabs">
                    {pages.map(p => (
                        <button
                            key={p.id}
                            onClick={() => setCurrentPage(p.id)}
                            className={`sub-tab ${currentPage === p.id ? 'active' : ''}`}
                        >
                            {p.name}
                        </button>
                    ))}
                </div>
                <div className="interface-content">
                    {feedback && <div className="feedback">{feedback}</div>}
                    {currentPage === 'accueil' && (
                        <div>
                            <h3 className="interface-title">Bienvenue chez TechCorp</h3>
                            <p className="lead">TechCorp cr√©e des solutions s√©curis√©es.</p>
                            <div className="hero">
                                <div className="hero-placeholder">
                                    <Globe size={50} />
                                    <span>Solutions s√©curis√©es</span>
                                </div>
                                <p>Explorez le site pour trouver des failles ou s√©curiser les pages.</p>
                            </div>
                        </div>
                    )}
                    {currentPage === 'produits' && (
                        <div>
                            <h3 className="interface-title">Nos produits</h3>
                            <div className="product-grid">
                                <div className="product-card">
                                    <div className="product-placeholder"><Server size={40} /></div>
                                    <h4>CloudSync</h4>
                                    <p>Partage s√©curis√©.</p>
                                </div>
                                <div className="product-card">
                                    <div className="product-placeholder"><Shield size={40} /></div>
                                    <h4>AIShield</h4>
                                    <p>Protection IA.</p>
                                </div>
                                <div className="product-card">
                                    <div className="product-placeholder"><Lock size={40} /></div>
                                    <h4>DataVault</h4>
                                    <p>Stockage s√©curis√©.</p>
                                </div>
                            </div>
                        </div>
                    )}
                    {currentPage === '√†-propos' && (
                        <div>
                            <h3 className="interface-title">√Ä propos de TechCorp</h3>
                            <p>Depuis 2010, TechCorp prot√®ge vos donn√©es.</p>
                            <p>Mission : un internet s√ªr pour tous.</p>
                        </div>
                    )}
                    {currentPage === 'connexion' && (
                        <div>
                            <h3 className="interface-title">Connexion</h3>
                            <p className="hint">Indice : Essaie un mot de passe simple ou une injection SQL comme " OR 1=1 --</p>
                            <div className="form">
                                <input
                                    type="text"
                                    value={formData.username}
                                    onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                                    className="input"
                                    placeholder="Nom d‚Äôutilisateur"
                                />
                                <input
                                    type="text"
                                    value={formData.password}
                                    onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                                    className="input"
                                    placeholder="Mot de passe"
                                />
                                <button
                                    onClick={() => {
                                        if (testSQLi(formData.username) || testSQLi(formData.password)) {
                                            setFeedback('Succ√®s : Injection SQL d√©tect√©e !');
                                        } else if (testWeakPassword(formData.username, formData.password)) {
                                            setFeedback('Succ√®s : Connexion avec un mot de passe faible !');
                                        } else {
                                            setFeedback('√âchec : Identifiants incorrects ou attaque non d√©tect√©e.');
                                        }
                                    }}
                                    className="button attaquants"
                                >
                                    Tester
                                </button>
                                {selectedTeam === 'd√©fenseurs' && (
                                    <>
                                        <button
                                            onClick={() => patchVulnerability('sqli')}
                                            className="button d√©fenseurs"
                                        >
                                            Corriger SQLi
                                        </button>
                                        <button
                                            onClick={() => patchVulnerability('weak_password')}
                                            className="button d√©fenseurs"
                                        >
                                            Renforcer mots de passe
                                        </button>
                                    </>
                                )}
                            </div>
                        </div>
                    )}
                    {currentPage === 'contact' && (
                        <div>
                            <h3 className="interface-title">Contactez-nous</h3>
                            <p className="hint">Indice : Teste un script comme <script>alert("test")</script> dans le message.</p>
                            <div className="form">
                <textarea
                    value={formData.comment}
                    onChange={(e) => setFormData({ ...formData, comment: e.target.value })}
                    className="input textarea"
                    placeholder="Votre message..."
                />
                                <input
                                    type="email"
                                    value={formData.newsletter}
                                    onChange={(e) => setFormData({ ...formData, newsletter: e.target.value })}
                                    className="input"
                                    placeholder="Email (Newsletter)"
                                />
                                <button
                                    onClick={() => {
                                        if (testXSS(formData.comment)) {
                                            setFeedback('Succ√®s : Script XSS ex√©cut√© !');
                                        } else {
                                            setFeedback('√âchec : Aucun script d√©tect√©.');
                                        }
                                    }}
                                    className="button attaquants"
                                >
                                    Tester
                                </button>
                                {selectedTeam === 'd√©fenseurs' && (
                                    <button
                                        onClick={() => patchVulnerability('xss')}
                                        className="button d√©fenseurs"
                                    >
                                        Corriger XSS
                                    </button>
                                )}
                                <button
                                    onClick={() => {
                                        setFeedback('Rien √† trouver ici, c‚Äôest un leurre !');
                                        handleAction(selectedTeam, 'Tentative sur newsletter (leurre)', 0);
                                    }}
                                    className="button d√©fenseurs"
                                >
                                    Tester Newsletter
                                </button>
                            </div>
                        </div>
                    )}
                </div>
            </div>
        );
    };

    const ServerInterface = ({ role }) => {
        const [terminalInput, setTerminalInput] = useState('');
        const [terminalHistory, setTerminalHistory] = useState([
            'Bienvenue sur le serveur TechCorp.',
            'Tapez "help" pour voir les commandes.'
        ]);
        const terminalEndRef = useRef(null);

        useEffect(() => {
            terminalEndRef.current?.scrollIntoView({ behavior: 'smooth' });
        }, [terminalHistory]);

        const executeCommand = (command) => {
            let output = '';
            const cmdParts = command.toLowerCase().split(' ');
            addLog(`Commande : ${command}`);

            switch (cmdParts[0]) {
                case 'help':
                    output = 'Commandes : ls, ps, netstat, cat, nmap, ssh, whoami, stop-service, close-port';
                    break;
                case 'ls':
                    output = 'config.txt  logs/  passwords.bak  run.sh  decoy.txt';
                    break;
                case 'ps':
                    output = 'PID\tCOMMAND\n1234\tapache2\n5678\tsshd\n4567\tmysql\n9999\tfake_service';
                    break;
                case 'netstat':
                    output = 'TCP\t0.0.0.0:22\tLISTEN\nTCP\t0.0.0.0:80\tLISTEN\nTCP\t0.0.0.0:21\tLISTEN\nTCP\t0.0.0.0:8080\tCLOSED';
                    break;
                case 'cat':
                    if (cmdParts[1] === 'passwords.bak') {
                        output = 'admin:weakpass';
                        if (selectedTeam === 'attaquants') {
                            handleAction('attaquants', 'Fichier passwords.bak trouv√© !', 10);
                        }
                    } else if (cmdParts[1] === 'decoy.txt') {
                        output = 'Ce fichier est un leurre, rien d‚Äôutile ici.';
                        handleAction(selectedTeam, 'Fichier decoy.txt lu (leurre)', 0);
                    } else {
                        output = 'Erreur : fichier non trouv√©.';
                    }
                    break;
                case 'nmap':
                    output = 'Scan... Ports : 22 (SSH), 80 (HTTP), 21 (FTP), 8080 (Inactif)';
                    if (selectedTeam === 'attaquants') {
                        handleAction('attaquants', 'Scan nmap effectu√©.', 5);
                    }
                    break;
                case 'ssh':
                    if (cmdParts[1] === 'admin@server' && cmdParts[2] === 'weakpass' && !serverState.services.ssh.patched && selectedTeam === 'attaquants') {
                        output = 'Connexion SSH r√©ussie ! Acc√®s admin obtenu.';
                        handleAction('attaquants', 'Acc√®s SSH obtenu avec weakpass.', 25);
                    } else {
                        output = 'Connexion SSH √©chou√©e.';
                    }
                    break;
                case 'whoami':
                    output = 'admin';
                    break;
                case 'stop-service':
                    if (cmdParts[1] === 'ssh' && selectedTeam === 'd√©fenseurs' && !serverState.services.ssh.patched) {
                        setServerState(prev => ({
                            ...prev,
                            services: { ...prev.services, ssh: { ...prev.services.ssh, patched: true } }
                        }));
                        output = 'Service SSH arr√™t√©.';
                        handleAction('d√©fenseurs', 'Service SSH s√©curis√©.', 15);
                    } else {
                        output = 'Erreur : service non trouv√© ou d√©j√† s√©curis√©.';
                    }
                    break;
                case 'close-port':
                    if (cmdParts[1] === '21' && selectedTeam === 'd√©fenseurs' && !serverState.services.ftp.patched) {
                        setServerState(prev => ({
                            ...prev,
                            services: { ...prev.services, ftp: { ...prev.services.ftp, patched: true } }
                        }));
                        output = 'Port 21 ferm√©.';
                        handleAction('d√©fenseurs', 'Port FTP ferm√©.', 15);
                    } else {
                        output = 'Erreur : port non trouv√© ou d√©j√† ferm√©.';
                    }
                    break;
                default:
                    output = `Commande inconnue : ${command}`;
            }
            setTerminalHistory(prev => [...prev, `> ${command}`, output]);
            setTerminalInput('');
        };

        return (
            <div className="panel">
                <h2 className="panel-title">Serveur TechCorp</h2>
                <p className="hint">Indice : Utilise "nmap" pour voir les ports, ou "cat passwords.bak" pour trouver des indices.</p>
                <div className="status-grid">
                    <div className="status-card">
                        <h3 className="status-title">Services</h3>
                        <div className="status-content">SSH, HTTP, FTP, MySQL, FakeDB (inactif)</div>
                    </div>
                    <div className="status-card">
                        <h3 className="status-title">Failles</h3>
                        <div className="status-content">{serverState.services.ssh.patched ? 'Aucune' : 'SSH (mot de passe faible)'}</div>
                    </div>
                    <div className="status-card">
                        <h3 className="status-title">Alertes</h3>
                        <div className="status-content">{gameLog.length > 0 ? 'Activit√© d√©tect√©e' : 'Aucune'}</div>
                    </div>
                </div>
                <div
                    className="terminal"
                    onClick={() => terminalInputRef.current.focus()}
                >
                    <div className="terminal-list">
                        {terminalHistory.map((line, i) => (
                            <div key={i} className="terminal-line">{line}</div>
                        ))}
                        <div ref={terminalEndRef} />
                    </div>
                    <div className="terminal-prompt">
                        <span>> </span>
                        <input
                            ref={terminalInputRef}
                            type="text"
                            value={terminalInput}
                            onChange={(e) => setTerminalInput(e.target.value)}
                            onKeyDown={(e) => e.key === 'Enter' && executeCommand(terminalInput)}
                            className="input terminal-input"
                            autoFocus
                        />
                    </div>
                </div>
            </div>
        );
    };

    const ResultsScreen = () => {
        const winner = scores.attaquants > scores.d√©fenseurs ? 'Attaquants' : 'D√©fenseurs';
        const isTie = scores.attaquants === scores.d√©fenseurs;

        return (
            <div className="game-container">
                <div className="results-panel">
                    <h1 className="intro-title">Fin de Partie</h1>
                    {isTie ? (
                        <h2 className="results-title">√âgalit√© !</h2>
                    ) : (
                        <h2 className={`results-title ${winner.toLowerCase()}`}>
                            Les {winner} gagnent !
                        </h2>
                    )}
                    <div className="score-grid">
                        <div className="score-card attaquants">
                            <div className="score-label">Attaquants</div>
                            <div className="score-value">{scores.attaquants}</div>
                        </div>
                        <div className="score-card d√©fenseurs">
                            <div className="score-label">D√©fenseurs</div>
                            <div className="score-value">{scores.d√©fenseurs}</div>
                        </div>
                    </div>
                    <button onClick={handleRestartGame} className="button restart">
                        Rejouer
                    </button>
                </div>
            </div>
        );
    };

    if (gameState === 'intro') return <IntroAnimation />;
    if (gameState === 'jeu') return <GameInterface />;
    if (gameState === 'r√©sultats') return <ResultsScreen />;
    return <div className="game-container">Chargement...</div>;
};

export default CyberWarGame;